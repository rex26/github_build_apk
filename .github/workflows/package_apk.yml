# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
   branches: [ main ]
  schedule:
    - cron: '00 11 * * 1-5'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '2.10.3'
          channel: 'stable'
          cache: true
          cache-key: flutter # optional, change this to force refresh cache
          cache-path: ${{ runner.tool_cache }}/flutter # optional, change this to specify the cache path
          architecture: x64 # optional, x64 or arm64
      - run: flutter --version
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      #- name: Get flutter version
      #  id: get_flutter_version
      #  uses: its404/get-flutter-version@v1.0.0
      #- name: Output flutter version
      #  run: echo 'version_number:' ${{ steps.get_flutter_version.outputs.version_number }} ' build_number:' ${{ steps.get_flutter_version.outputs.build_number }}]
      - run: echo `grep 'version:' pubspec.yaml | sed 's/version://'`
      - run: perl -i -pe 's/^(version:\s+\d+\.\d+\.\d+\+)(\d+)$/$1.($2+${{ github.run_number }})/e' pubspec.yaml
      #- run: echo 'final version:' ${{ steps.get_flutter_version.outputs.build_number }} + ${{ github.run_number }}
      
      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.
      #- run: flutter doctor
      #- run: flutter pub get
      - name: Output Run ID
        run: echo ${{ github.run_id }}
      - name: Output Run Number
        run: echo ${{ github.run_number }}
      - name: Output Run Attempt
        run: echo ${{ github.run_attempt }}
      #- name: Build APK
      #  run: |
      #    export BRANCH_NAME=${GITHUB_REF##*/}
      #    if [[ $BRANCH_NAME = 'prod' ]]; then
      #      export APP_ENV="Prod"
      #    else
      #      export APP_ENV="Stage"
      #    fi
      #    flutter build apk --dart-define=APP_ENV=$APP_ENV --release
      #- uses: actions/upload-artifact@v1
      #  with:
      #    name: release-apk
      #    path: build/app/outputs/apk/release/app-release.apk
          
